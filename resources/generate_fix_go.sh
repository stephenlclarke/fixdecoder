#!/usr/bin/env bash
#
# generate_fix_xml_go.sh
# 1) Downloads FIX XMLs into ./resources
# 2) Generates fix<ver> packages embedding them
# 3) Emits chooseFixVersion.go with imports and dynamic version cases
#
set -euo pipefail
IFS=$'\n\t'

URL_BASE="https://raw.githubusercontent.com/quickfix/quickfix/master/spec"
# versions to seed download; will discover others too
VERSIONS=("40" "41" "42" "43" "44" "50" "50SP1" "50SP2" "T11")
# Base module import path for generated packages
MODULE_PATH="bitbucket.org/edgewater/fixdecoder/fix"

GO_VER="1.24.3"

#if [ ! -f go.work ]; then
#  echo "ðŸ”§ Initializing go.work"
#  go work init
#fi

# 1) Download XML files
mkdir -p resources
for ver in "${VERSIONS[@]}"; do
  url="$URL_BASE/FIX${ver}.xml"
  dest="resources/FIX${ver}.xml"
  echo "Downloading $url â†’ $dest"
  curl -sSf "$url" -o "$dest"
done

# 2) Discover all FIX*.xml in resources
mapfile -t xmlFiles < <(ls resources/FIX*.xml)
schemaVers=()
for xml in "${xmlFiles[@]}"; do
  base=$(basename "$xml" .xml)  # e.g. FIX44 or FIX50SP1
  ver=${base#FIX}                # strip leading FIX
  schemaVers+=("$ver")
done

# 3) Generate per-version Go packages
for ver in "${schemaVers[@]}"; do
  pkg="fix${ver}"
  xmlPath="resources/FIX${ver}.xml"
  outDir="fix/$pkg"
  outFile="$outDir/${pkg}.go"
  testFile="$outDir/${pkg}_test.go"

  echo "Processing $xmlPath â†’ $outFile"
  mkdir -p "$outDir"

  escaped=$(awk '{gsub(/`/, "`\"+\"`\"+`"); print}' "$xmlPath")

  cat > "$outFile" <<EOF
// Code generated by generate_fix_go.sh; DO NOT EDIT.
package $pkg

// FIX${ver}XML contains the raw FIX ${ver} XML schema.
var FIX${ver}XML = \`
$escaped
\`
EOF

  # Generate minimal test to ensure schema is not empty
  cat > "$testFile" <<EOF
// Code generated by generate_fix_go.sh; DO NOT EDIT.
package $pkg

import "testing"

func TestFIX${ver}XMLNotEmpty(t *testing.T) {
	if len(FIX${ver}XML) == 0 {
		t.Fatalf("FIX${ver}XML is empty")
	}
}
EOF

done

# 4) Generate chooseFixVersion.go with imports and switch
out="fix/chooseFixVersion.go"
echo "Generating $out"
# Build comma-separated version list
versCSV=$(IFS=, ; echo "${schemaVers[*]}")
cat > "$out" <<EOF
// Code generated by generate_fix_go.sh; DO NOT EDIT.
package fix

import (
EOF
for ver in "${schemaVers[@]}"; do
  pkg="fix${ver}"
  printf "    %-8s \"%s/%s\"
" "$pkg" "$MODULE_PATH" "$pkg" >> "$out"
done
cat >> "$out" <<EOF
)

// chooseEmbeddedXML returns the raw XML constant for a given FIX version.
func ChooseEmbeddedXML(ver string) string {
    switch ver {
EOF
for ver in "${schemaVers[@]}"; do
  pkg="fix${ver}"
  echo "    case \"${ver}\":" >> "$out"
  echo "        return ${pkg}.FIX${ver}XML" >> "$out"
done
cat >> "$out" <<EOF
    default:
        // fallback to 44
        return fix44.FIX44XML
    }
}

// supportedFixVersions returns a comma-separated list of supported FIX versions.
func SupportedFixVersions() string {
    return "${versCSV}"
}
EOF

printf "Done.\n"